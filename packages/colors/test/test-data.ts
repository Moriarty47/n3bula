import { formatters, transformer } from '$test/utils';
import type { CMYK, HSL, HSV, HWB, LAB, LCH, RGB, XYZ } from '@/utils/types';

export const rgbData: { v: string | RGB; e: RGB; }[] = transformer<string | RGB, RGB>([
  ['', [0, 0, 0, 0]],
  ['rgb(255,0,0)', [255, 0, 0, 1]],
  ['rgb(300,0,0)', [255, 0, 0, 1]],
  ['rgb(255,-10,0)', [255, 0, 0, 1]],
  ['rgb(255,0,0)', [255, 0, 0, 1]],
  ['rgba(255,0,0,1)', [255, 0, 0, 1]],
  ['rgb(0%,0%,0%)', [0, 0, 0, 1]],
  ['rgb(100%,50%,25%)', [255, 128, 64, 1]],
  ['rgb(300%,-10%,0%)', [255, 0, 0, 1]],
  ['rgb(100%,0%,0%,1)', [255, 0, 0, 1]],
  ['rgb(20%,40%,60%,1)', [51, 102, 153, 1]],
  [[351, 102, 153, 1], [255, 102, 153, 1]],
  [[-51, 21, 1, .5], [0, 21, 1, .5]],
  [[51, 1, 1, 215], [51, 1, 1, 1]],
], formatters.rgb);

export const hexData: { v: string | RGB, e: RGB; }[] = transformer<string | RGB, RGB>([
  ['#ff0000', [255, 0, 0, 1]],
  ['#ff0000ff', [255, 0, 0, 1]],
  ['#f00f', [255, 0, 0, 1]],
  ['#f00', [255, 0, 0, 1]],
  ['#f0f1', [255, 0, 255, 0.07]],
  ['#ff0f', [255, 255, 0, 1]],
  ['#000f', [0, 0, 0, 1]],
  ['#0f0f', [0, 255, 0, 1]],
  ['#2f2f2f', [47, 47, 47, 1]],
  ['#ccc', [204, 204, 204, 1]],
  ['#ccc8', [204, 204, 204, .53]],
], formatters.rgb);

export const rgb2hexData: { v: RGB, e: string; }[] = transformer<RGB, string>([
  [[255, 0, 0, 1], '#ff0000'],
  [[255, 0, 0, 1], '#ff0000'],
  [[255, 0, 255, 0.07], '#ff00ff12'],
  [[255, 255, 0, 1], '#ffff00'],
  [[0, 0, 0, 1], '#000000'],
  [[0, 255, 0, 1], '#00ff00'],
  [[47, 47, 47, 1], '#2f2f2f'],
  [[204, 204, 204, 1], '#cccccc'],
  [[204, 204, 204, .53], '#cccccc88'],
], formatters.rgb, formatters.string);

export const rgb2cmykData: { v: RGB, e: CMYK; }[] = transformer<RGB, CMYK>([
  [[0, 0, 0], [0, 0, 0, 100]],
  [[255, 10, 0], [0, 96, 100, 0]],
  [[255, 0, 0], [0, 100, 100, 0]],
  [[255, 0, 0, 1], [0, 100, 100, 0]],
  [[255, 255, 255], [0, 0, 0, 0]],
  [[0, 255, 0], [100, 0, 100, 0]],
  [[0, 0, 255], [100, 100, 0, 0]],
  [[255, 255, 0], [0, 0, 100, 0]],
  [[0, 255, 255], [100, 0, 0, 0]],
  [[255, 0, 255], [0, 100, 0, 0]],
], formatters.rgb, formatters.cmyk);

export const rgb2grayscaleData: { v: RGB, e: number; }[] = transformer<RGB, number>([
  [[0, 0, 0], [0]],
  [[255, 10, 0], [82.115]],
  [[255, 0, 0, 1], [76.245]],
  [[255, 255, 255], [255]],
  [[0, 255, 0], [149.685]],
  [[0, 0, 255], [29.07]],
  [[255, 255, 0], [225.93]],
  [[0, 255, 255], [178.755]],
  [[255, 0, 255], [105.315]],
], formatters.rgb, formatters.number);

export const rgb2hslData: { v: RGB, e: HSL; }[] = transformer<RGB, HSL>([
  [[0, 0, 0, 1], [0, 0, 0, 1]],
  [[255, 255, 255, 1], [0, 0, 100, 1]],
  [[237, 118, 81, 1], [14, 81, 62, 1]],
  [[240, 202, 14, 1], [50, 89, 50, 1]],
  [[191, 161, 0, 1], [51, 100, 37, 1]],
  [[161, 164, 36, 0.3], [61, 64, 39, 0.3]],
  [[0, 128, 0, 1], [120, 100, 25, 1]],
  [[30, 172, 65, 1.7], [135, 70, 40, 1]],
  [[128, 255, 255, 1], [180, 100, 75, 1]],
  [[128, 128, 255, 1], [240, 100, 75, 1]],
  [[61, 27, 234, 1], [250, 83, 51, 1]],
  [[191, 64, 191, 1], [300, 50, 50, 1]],
], formatters.rgb, formatters.hsl);

export const rgb2hsvData: { v: RGB, e: HSV; }[] = transformer<RGB, HSV>([
  [[0, 0, 0], [0, 0, 0]],
  [[255, 255, 255], [0, 0, 100]],
  [[255, 0, 0], [0, 100, 100]],
  [[0, 255, 0], [120, 100, 100]],
  [[0, 0, 255], [240, 100, 100]],
  [[255, 255, 0], [60, 100, 100]],
  [[0, 255, 255], [180, 100, 100]],
  [[255, 0, 255], [300, 100, 100]],
  [[191, 191, 191], [0, 0, 75]],
  [[128, 128, 128], [0, 0, 50]],
  [[128, 0, 0], [0, 100, 50]],
  [[128, 128, 0], [60, 100, 50]],
  [[0, 128, 0], [120, 100, 50]],
  [[128, 0, 128], [300, 100, 50]],
  [[0, 128, 128], [180, 100, 50]],
  [[0, 0, 128], [240, 100, 50]],
  [[226, 85, 178, 0.9], [320, 62, 89, 0.9]],
  [[41, 137, 164, 0.8], [193, 75, 64, 0.8]],
  [[233, 214, 40, 0.7], [54, 83, 91, 0.7]],
  [[115, 17, 184, 0.6], [275, 91, 72, 0.6]],
  [[205, 94, 65, 0.5], [12, 68, 80, 0.5]],
  [[123, 229, 104, 0.9], [111, 55, 90, 0.9]],
  [[243, 58, 119, 1.0], [340, 76, 95, 1.0]],
  [[207, 235, 38, 0.7], [69, 84, 92, 0.7]],
  [[71, 102, 198, 0.6], [225, 64, 78, 0.6]],
  [[169, 20, 167, 0.8], [301, 88, 66, 0.8]],
  [[221, 169, 60, 0.4], [41, 73, 87, 0.4]],
  [[98, 233, 189, 0.9], [160, 58, 91, 0.9]],
], formatters.rgb, formatters.hsv);

export const rgb2hwbData: { v: RGB, e: HWB; }[] = transformer<RGB, HWB>([
  [[0, 0, 0, 1], [0, 0, 100, 1]],
  [[0, 102, 255, 1], [216, 0, 0, 1]],
  [[244, 67, 54, 1], [4, 21, 4, 1]],
  [[233, 30, 99, 1], [340, 12, 9, 1]],
  [[156, 39, 176, 1], [291, 15, 31, 1]],
  [[103, 58, 183, 1], [262, 23, 28, 1]],
  [[63, 81, 181, 4], [231, 25, 29, 1]],
  [[33, 150, 243, 1], [207, 13, 5, 1]],
  [[3, 169, 244, 1], [199, 1, 4, 1]],
  [[128, 128, 255, 1], [240, 50, 0, 1]],
  [[61, 27, 234, 1], [250, 11, 8, 1]],
  [[191, 64, 191, 1], [300, 25, 25, 1]],
], formatters.rgb, formatters.hwb);

export const rgb2xyzData: { v: RGB, e: XYZ; }[] = transformer<RGB, XYZ>([
  [[0, 0, 0], [0, 0, 0]],
  [[0, 102, 255], [0.228, 0.167, 0.966]],
  [[244, 67, 54], [0.40, 0.235, 0.059]],
  [[156, 39, 176], [0.223, 0.117, 0.421]],
  [[233, 30, 99], [0.363, 0.192, 0.136]],
  [[103, 58, 183], [0.157, 0.093, 0.458]],
  [[63, 81, 181], [0.133, 0.103, 0.45]],
  [[33, 150, 243], [0.277, 0.286, 0.888]],
  [[3, 169, 244], [0.305, 0.349, 0.907]],
  [[128, 128, 255], [0.347, 0.272, 0.98]],
  [[61, 27, 234], [0.172, 0.077, 0.784]],
  [[191, 64, 191], [0.327, 0.185, 0.511]],
], formatters.rgb, formatters.xyz);

export const rgb2labData: { v: RGB, e: LAB; }[] = transformer<RGB, LAB>([
  [[0, 0, 0], [0, 0, 0]],
  [[0, 102, 255], [47.88, 35.33, -82.04]],
  [[244, 67, 54], [55.58, 66.14, 47.74]],
  [[156, 39, 176], [40.74, 63.84, -47.88]],
  [[233, 30, 99], [50.92, 74.32, 15.41]],
  [[103, 58, 183], [36.56, 47.81, -59.24]],
  [[63, 81, 181], [38.38, 25.2, -55.22]],
  [[33, 150, 243], [60.43, 2.07, -55.09]],
  [[3, 169, 244], [65.67, -9.72, -47.37]],
  [[128, 128, 255], [59.16, 33.39, -63.52]],
  [[61, 27, 234], [33.35, 70.1, -94.17]],
  [[191, 64, 191], [50.1, 65.45, -41.46]],
], formatters.rgb, formatters.lab);

export const xyzData: { v: string | XYZ, e: XYZ; }[] = transformer<string | XYZ, XYZ>([
  [[0, 0, 0], [0, 0, 0]],
  [[0.25, 0.40, 0.10], [0.25, 0.40, 0.10]],
  [[0.228, 0.167, 0.966], [0.228, 0.167, 0.966]],
  [[0.40, 0.235, 0.059], [0.40, 0.235, 0.059]],
  [[0.223, 0.117, 0.421], [0.223, 0.117, 0.421]],
  [[0.363, 0.192, 0.136], [0.363, 0.192, 0.136]],
  [[0.157, 0.093, 0.458], [0.157, 0.093, 0.458]],
  [[0.133, 0.103, 0.45], [0.133, 0.103, 0.45]],
  ['xyz(0.277,0.286,0.888)', [0.277, 0.286, 0.888]],
  ['xyz(0.305,0.349,0.907)', [0.305, 0.349, 0.907]],
  ['xyz(0.347,0.272,0.98)', [0.347, 0.272, 0.98]],
  ['xyz(0.172,0.077,0.784)', [0.172, 0.077, 0.784]],
  ['xyz(0.327,0.185,0.511)', [0.327, 0.185, 0.511]],
], formatters.xyz);

export const xyz2rgbData: { v: XYZ, e: RGB; }[] = transformer<XYZ, RGB>([
  [[0, 0, 0], [0, 0, 0, 1]],
  [[0.25, 0.40, 0.10], [106, 190, 55, 1]],
  [[0.228, 0.167, 0.966], [2, 102, 255, 1]],
  [[0.40, 0.235, 0.059], [244, 67, 54, 1]],
  [[0.223, 0.117, 0.421], [156, 40, 176, 1]],
  [[0.363, 0.192, 0.136], [233, 31, 99, 1]],
  [[0.157, 0.093, 0.458], [104, 57, 183, 1]],
  [[0.133, 0.103, 0.45], [62, 81, 181, 1]],
  [[0.277, 0.286, 0.888], [33, 150, 243, 1]],
  [[0.305, 0.349, 0.907], [0, 169, 244, 1]],
  [[0.347, 0.272, 0.98], [129, 128, 255, 1]],
  [[0.172, 0.077, 0.784], [62, 26, 234, 1]],
  [[0.327, 0.185, 0.511], [191, 64, 191, 1]],
], formatters.xyz, formatters.rgb);

export const xyz2labData: { v: XYZ, e: LAB; }[] = transformer<XYZ, LAB>([
  [[0, 0, 0], [0, 0, 0]],
  [[0.228, 0.167, 0.966], [47.88, 35.33, -82.04]],
  [[0.40, 0.235, 0.059], [55.58, 66.14, 47.74]],
  [[0.223, 0.117, 0.421], [40.74, 63.84, -47.88]],
  [[0.363, 0.192, 0.136], [50.92, 74.32, 15.41]],
  [[0.157, 0.093, 0.458], [36.56, 47.81, -59.24]],
  [[0.133, 0.103, 0.45], [38.38, 25.2, -55.22]],
  [[0.277, 0.286, 0.888], [60.43, 2.07, -55.09]],
  [[0.305, 0.349, 0.907], [65.67, -9.72, -47.37]],
  [[0.347, 0.272, 0.98], [59.16, 33.39, -63.52]],
  [[0.172, 0.077, 0.784], [33.35, 70.1, -94.17]],
  [[0.327, 0.185, 0.511], [50.1, 65.45, -41.46]],
], formatters.xyz, formatters.lab);

export const labData: { v: string | LAB, e: LAB; }[] = transformer<string | LAB, LAB>([
  [[0, 0, 0], [0, 0, 0]],
  [[47.88, 35.33, -82.04], [47.88, 35.33, -82.04]],
  [[55.58, 66.14, 47.74], [55.58, 66.14, 47.74]],
  [[40.74, 63.84, -47.88], [40.74, 63.84, -47.88]],
  [[50.92, 74.32, 15.41], [50.92, 74.32, 15.41]],
  [[36.56, 47.81, -59.24], [36.56, 47.81, -59.24]],
  [[38.38, 25.2, -55.22], [38.38, 25.2, -55.22]],
  [[60.43, 2.07, -55.09], [60.43, 2.07, -55.09]],
  ['lab(65.67,-9.72,-47.37)', [65.67, -9.72, -47.37]],
  ['lab(59.16,33.39,-63.52)', [59.16, 33.39, -63.52]],
  ['lab(33.35,70.1,-94.17)', [33.35, 70.1, -94.17]],
  ['lab(50.1,65.45,-41.46)', [50.1, 65.45, -41.46]],
], formatters.lab);

export const lab2xyzData: { v: LAB, e: XYZ; }[] = transformer<LAB, XYZ>([
  [[0, 0, 0], [0, 0, 0]],
  [[47.88, 35.33, -82.04], [0.228, 0.167, 0.966]],
  [[55.58, 66.14, 47.74], [0.40, 0.235, 0.059]],
  [[40.74, 63.84, -47.88], [0.223, 0.117, 0.421]],
  [[50.92, 74.32, 15.41], [0.363, 0.192, 0.136]],
  [[36.56, 47.81, -59.24], [0.157, 0.093, 0.458]],
  [[38.38, 25.2, -55.22], [0.133, 0.103, 0.45]],
  [[60.43, 2.07, -55.09], [0.277, 0.286, 0.888]],
  [[65.67, -9.72, -47.37], [0.305, 0.349, 0.907]],
  [[59.16, 33.39, -63.52], [0.347, 0.272, 0.98]],
  [[33.35, 70.1, -94.17], [0.172, 0.077, 0.784]],
  [[50.1, 65.45, -41.46], [0.327, 0.185, 0.511]],
], formatters.lab, formatters.xyz);

export const lab2lchData: { v: LAB, e: LCH; }[] = transformer<LAB, LCH>([
  [[0, 0, 0], [0, 0, 0]],
  [[47.88, 35.33, -82.04], [47.88, 89.32, 293.30]],
  [[55.58, 66.14, 47.74], [55.58, 81.57, 35.82]],
  [[40.74, 63.84, -47.88], [40.74, 79.80, 323.13]],
  [[50.92, 74.32, 15.41], [50.92, 75.90, 11.71]],
  [[36.56, 47.81, -59.24], [36.56, 76.13, 308.91]],
  [[38.38, 25.2, -55.22], [38.38, 60.70, 294.53]],
  [[60.43, 2.07, -55.09], [60.43, 55.13, 272.15]],
  [[65.67, -9.72, -47.37], [65.67, 48.36, 258.4]],
  [[59.16, 33.39, -63.52], [59.16, 71.76, 297.73]],
  [[33.35, 70.1, -94.17], [33.35, 117.40, 306.66]],
  [[50.1, 65.45, -41.46], [50.1, 77.48, 327.65]],
], formatters.lab, formatters.lch);

export const lchData: { v: string | LCH, e: LCH; }[] = transformer<string | LCH, LCH>([
  [[0, 0, 0], [0, 0, 0]],
  [[47.88, 89.32, 293.30], [47.88, 89.32, 293.30]],
  [[55.58, 81.57, 35.82], [55.58, 81.57, 35.82]],
  [[40.74, 79.80, 323.13], [40.74, 79.80, 323.13]],
  [[50.92, 75.90, 11.71], [50.92, 75.90, 11.71]],
  [[36.56, 76.13, 308.91], [36.56, 76.13, 308.91]],
  [[38.38, 60.70, 294.53], [38.38, 60.70, 294.53]],
  ['lch(60.43%,55.13%,272.15deg)', [60.43, 55.13, 272.15]],
  ['lch(65.67%,48.36%,258.4deg)', [65.67, 48.36, 258.4]],
  ['lch(59.16%,71.76%,297.73deg)', [59.16, 71.76, 297.73]],
  ['lch(33.35%,117.40%,306.66deg)', [33.35, 100, 306.66]],
  ['lch(50.1%,77.48%,327.65deg)', [50.1, 77.48, 327.65]],
], formatters.lch);

export const lch2labData: { v: LCH, e: LAB; }[] = transformer<LCH, LAB>([
  [[0, 0, 0], [0, 0, 0]],
  [[47.88, 89.32, 293.30], [47.88, 35.33, -82.04]],
  [[55.58, 81.57, 35.82], [55.58, 66.14, 47.74]],
  [[40.74, 79.80, 323.13], [40.74, 63.84, -47.88]],
  [[50.92, 75.90, 11.71], [50.92, 74.32, 15.4]],
  [[36.56, 76.13, 308.91], [36.56, 47.82, -59.24]],
  [[38.38, 60.70, 294.53], [38.38, 25.2, -55.22]],
  [[60.43, 55.13, 272.15], [60.43, 2.07, -55.09]],
  [[65.67, 48.36, 258.4], [65.67, -9.72, -47.37]],
  [[59.16, 71.76, 297.73], [59.16, 33.39, -63.52]],
  [[33.35, 117.40, 306.66], [33.35, 70.1, -94.18]],
  [[50.1, 77.48, 327.65], [50.1, 65.45, -41.46]],
], formatters.lch, formatters.lab);

export const hwbData: { v: string | HWB, e: HWB; }[] = transformer<string | HWB, HWB>([
  [[0, 0, 100, 1], [0, 0, 100, 1]],
  [[216, 0, 0, 1], [216, 0, 0, 1]],
  [[4, 21, 4, 1], [4, 21, 4, 1]],
  [[340, 12, 9, 1], [340, 12, 9, 1]],
  [[291, 15, 31, 1], [291, 15, 31, 1]],
  [[262, 23, 28, 1], [262, 23, 28, 1]],
  [[231, 25, 29, 1], [231, 25, 29, 1]],
  ['hwb(207,13,5)', [207, 13, 5, 1]],
  ['hwb(199,1,4)', [199, 1, 4, 1]],
  ['hwb(240,50,0)', [240, 50, 0, 1]],
  ['hwb(250,11,8)', [250, 11, 8, 1]],
  ['hwb(300,25,25)', [300, 25, 25, 1]],
], formatters.hwb);

export const hwb2rgbData: { v: HWB, e: RGB; }[] = transformer<HWB, RGB>([
  [[0, 0, 100, 1], [0, 0, 0, 1]],
  [[216, 0, 0, 1], [0, 102, 255, 1]],
  [[4, 21, 4, 1], [245, 66, 54, 1]],
  [[340, 12, 9, 1], [232, 31, 98, 1]],
  [[291, 15, 31, 1], [155, 38, 176, 1]],
  [[262, 23, 28, 1], [104, 59, 184, 1]],
  [[231, 25, 29, 1], [64, 81, 181, 1]],
  [[207, 13, 5, 1], [33, 148, 242, 1]],
  [[199, 1, 4, 1], [3, 168, 245, 1]],
  [[240, 50, 0, 1], [128, 128, 255, 1]],
  [[250, 11, 8, 1], [62, 28, 235, 1]],
  [[300, 25, 25, 1], [191, 64, 191, 1]],
], formatters.hwb, formatters.rgb);

export const hslData: { v: string | HSL, e: HSL; }[] = transformer<string | HSL, HSL>([
  ['hsl(255deg,0%,0%)', [255, 0, 0, 1]],
  ['hsl(300deg,0%,0%)', [300, 0, 0, 1]],
  ['hsl(255deg,-10%,0%)', [255, 0, 0, 1]],
  ['hsl(255deg,0%,0%)', [255, 0, 0, 1]],
  ['hsla(255deg,0%,0%,1)', [255, 0, 0, 1]],
  ['hsl(0deg,0%,0%)', [0, 0, 0, 1]],
  ['hsl(100deg,50%,25%)', [100, 50, 25, 1]],
  ['hsl(300deg,-10%,0%)', [300, 0, 0, 1]],
  ['hsl(100deg,0%,0%,1)', [100, 0, 0, 1]],
  ['hsl(20deg,40%,60%,1)', [20, 40, 60, 1]],
  [[351, 102, 153, 1], [351, 100, 100, 1]],
  [[-51, 21, 1, .5], [309, 21, 1, .5]],
  [[51, 1, 1, 215], [51, 1, 1, 1]],
], formatters.hsl);

export const hsvData: { v: string | HSV, e: HSV; }[] = transformer<string | HSV, HSV>([
  ['hsl(255deg,0%,0%)', [255, 0, 0, 1]],
  ['hsl(300deg,0%,0%)', [300, 0, 0, 1]],
  ['hsl(255deg,-10%,0%)', [255, 0, 0, 1]],
  ['hsl(255deg,0%,0%)', [255, 0, 0, 1]],
  ['hsla(255deg,0%,0%,1)', [255, 0, 0, 1]],
  ['hsl(0deg,0%,0%)', [0, 0, 0, 1]],
  ['hsl(100deg,50%,25%)', [100, 50, 25, 1]],
  ['hsl(300deg,-10%,0%)', [300, 0, 0, 1]],
  ['hsl(100deg,0%,0%,1)', [100, 0, 0, 1]],
  ['hsl(20deg,40%,60%,1)', [20, 40, 60, 1]],
  [[351, 102, 153, 1], [351, 100, 100, 1]],
  [[-51, 21, 1, .5], [309, 21, 1, .5]],
  [[51, 1, 1, 215], [51, 1, 1, 1]],
], formatters.hsv);

export const hsv2hslData: { v: HSV, e: HSL; }[] = transformer<HSV, HSL>([
  [[0, 0, 0, 1], [0, 0, 0, 1]],
  [[0, 0, 100, 1], [0, 0, 100, 1]],
  [[14, 66, 93, 1], [14, 81, 62, 1]],
  [[50, 94, 94, 1], [50, 89, 50, 1]],
  [[50, 100, 75, 1], [50, 100, 38, 1]],
  [[61, 77, 64,], [61, 63, 39,]],
  [[120, 100, 50, 1], [120, 100, 25, 1]],
  [[134, 82, 67,], [134, 69, 40,]],
  [[180, 50, 100, 1], [180, 100, 75, 1]],
  [[240, 50, 100, 1], [240, 100, 75, 1]],
  [[250, 88, 91, 1], [250, 82, 51, 1]],
  [[300, 66, 75, 1], [300, 50, 50, 1]],
], formatters.hsv, formatters.hsl);

export const hsv2rgbData: { v: HSV, e: RGB; }[] = transformer<HSV, RGB>([
  [[0, 0, 0], [0, 0, 0]],
  [[0, 0, 100], [255, 255, 255]],
  [[0, 100, 100], [255, 0, 0]],
  [[120, 100, 100], [0, 255, 0]],
  [[240, 100, 100], [0, 0, 255]],
  [[60, 100, 100], [255, 255, 0]],
  [[180, 100, 100], [0, 255, 255]],
  [[300, 100, 100], [255, 0, 255]],
  [[0, 0, 75], [191, 191, 191]],
  [[0, 0, 50], [128, 128, 128]],
  [[0, 100, 50], [128, 0, 0]],
  [[60, 100, 50], [128, 128, 0]],
  [[120, 100, 50], [0, 128, 0]],
  [[300, 100, 50], [128, 0, 128]],
  [[180, 100, 50], [0, 128, 128]],
  [[240, 100, 50], [0, 0, 128]],
  [[320.5, 62.4, 88.6, 0.9], [226, 85, 178, 0.9]],
  [[193.3, 74.8, 64.5, 0.8], [41, 137, 164, 0.8]],
  [[54.2, 82.6, 91.2, 0.7], [233, 214, 40, 0.7]],
  [[275.4, 90.7, 72.1, 0.6], [115, 17, 184, 0.6]],
  [[12.7, 68.5, 80.3, 0.5], [205, 94, 65, 0.5]],
  [[110.8, 54.6, 89.7, 0.9], [123, 229, 104, 0.9]],
  [[340.2, 76.3, 95.2, 1.0], [243, 58, 119, 1.0]],
  [[68.4, 83.7, 92.0, 0.7], [207, 235, 38, 0.7]],
  [[225.5, 64.3, 77.8, 0.6], [71, 102, 198, 0.6]],
  [[300.7, 88.2, 66.1, 0.8], [169, 20, 167, 0.8]],
  [[40.6, 72.9, 86.7, 0.4], [221, 169, 60, 0.4]],
  [[160.3, 58.1, 91.4, 0.9], [98, 233, 189, 0.9]],
], formatters.hsv, formatters.rgb);

export const hsl2hsvData: { v: HSL, e: HSV; }[] = transformer<HSL, HSV>([
  [[0, 0, 0, 1], [0, 0, 0, 1]],
  [[0, 0, 100, 1], [0, 0, 100, 1]],
  [[14.3, 81.7, 62.4, 1], [14.3, 66, 93.1, 1]],
  [[50, 89.3, 49.7, 1], [50, 94.3, 94.1, 1]],
  [[50.5, 100, 37.5, 1], [50.5, 100, 75, 1]],
  [[61.5, 63.8, 39.3, .3], [61.5, 77.9, 64.4, .3]],
  [[120, 100, 25, 1], [120, 100, 50, 1]],
  [[134.9, 70.7, 39.6, .7], [134.9, 82.8, 67.6, .7]],
  [[180, 100, 75, 1], [180, 50, 100, 1]],
  [[240, 100, 75, 1], [240, 50, 100, 1]],
  [[250, 83.2, 51.1, 1], [250, 88.7, 91.8, 1]],
  [[300, 50, 50, 1], [300, 66.7, 75, 1]],
], formatters.hsl, formatters.hsv);

export const hsl2rgbData: { v: HSL, e: RGB; }[] = transformer<HSL, RGB>([
  [[0, 0, 0, 1], [0, 0, 0, 1]],
  [[0, 0, 100, 1], [255, 255, 255, 1]],
  [[14.3, 81.7, 62.4, 1], [237, 118, 81, 1]],
  [[50, 89.3, 49.7, 1], [240, 202, 14, 1]],
  [[50.5, 100, 37.5, 1], [191, 161, 0, 1]],
  [[61.5, 63.8, 39.3, .3], [161, 164, 36, .3]],
  [[120, 100, 25, 1], [0, 128, 0, 1]],
  [[134.9, 70.7, 39.6, 7], [30, 172, 65, 1]],
  [[180, 100, 75, 1], [128, 255, 255, 1]],
  [[240, 100, 75, 1], [128, 128, 255, 1]],
  [[250, 83.2, 51.1, 1], [61, 27, 234, 1]],
  [[300, 50, 50, 1], [191, 64, 191, 1]],
  [[232, 0, 1, 1], [3, 3, 3, 1]]
], formatters.hsl, formatters.rgb);

export const cmykData: { v: string | CMYK, e: CMYK; }[] = transformer<string | CMYK, CMYK>([
  ['cmyk(0,0,0,0)', [0, 0, 0, 0]],
  ['cmyk(21,0,0,0)', [21, 0, 0, 0]],
  ['cmyk(0,0,0,100)', [0, 0, 0, 100]],
  ['cmyk(0,100,100,0)', [0, 100, 100, 0]],
  ['cmyk(100,0,100,0)', [100, 0, 100, 0]],
  ['cmyk(46,0,100,0)', [46, 0, 100, 0]],
  ['cmyk(100,100,0,0)', [100, 100, 0, 0]],
  ['cmyk(100,0,0,0)', [100, 0, 0, 0]],
  ['cmyk(0,100,0,0)', [0, 100, 0, 0]],
  [[0, 100, 0, 0], [0, 100, 0, 0]],
  [[100, 0, 100, 0], [100, 0, 100, 0]],
], formatters.cmyk, formatters.cmyk);

export const cmyk2rgbData: { v: CMYK, e: RGB; }[] = transformer<CMYK, RGB>([
  [[0, 0, 0, 0], [255, 255, 255, 1]],
  [[21, 0, 0, 0], [201, 255, 255, 1]],
  [[0, 0, 0, 100], [0, 0, 0, 1]],
  [[0, 100, 100, 0], [255, 0, 0, 1]],
  [[100, 0, 100, 0], [0, 255, 0, 1]],
  [[46, 0, 100, 0], [138, 255, 0, 1]],
  [[100, 100, 0, 0], [0, 0, 255, 1]],
  [[100, 0, 0, 0], [0, 255, 255, 1]],
  [[0, 100, 0, 0], [255, 0, 255, 1]],
], formatters.cmyk, formatters.rgb);
